两个链表的第一个公共结点：
输入两个链表，找出它们的第一个公共结点。

分析：
    首先能想到的就是遍历一个链表，每当遍历到一个结点时候，再遍历另外一个链表判断是否有相同的结点，这样的话算法复杂度是O(mn)。
    效率太低了，所以要想一个效率高一些的算法。首先遍历两个链表得到长度，先在较长的链表上先走若干步，再一起遍历，第一次相同的
    结点就是第一个公共结点。这个算法的复杂度是O(m+n)。

Solution:
/*function ListNode(x){
    this.val = x;
    this.next = null;
}*/
function FindFirstCommonNode(pHead1, pHead2)
{
    // write code here
    var p1 = pHead1,
        p2 = pHead2,
        plen1 = 0,
        plen2 = 0;
    while(p1){
        plen1++;
        p1 = p1.next;
    }
    while(p2){
        plen2++;
        p2 = p2.next;
    }
    if(plen1>plen2){
        while(plen1>plen2){
            pHead1 = pHead1.next;
            plen1--;
        }
    }else{
        while(plen1<plen2){
            pHead2 = pHead2.next;
            plen2--;
        }
    }
    while(pHead1 && pHead2){
        if(pHead1 == pHead2){
            return pHead1 ;
        }else{
            pHead1 = pHead1.next;
            pHead2 = pHead2.next;
        }
    }
    return ;
}