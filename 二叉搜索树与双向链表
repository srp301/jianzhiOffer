二叉搜索树与双向链表：

输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。

分析：
	递归。

	解题思路：
	1.将左子树构造成双链表，并返回链表头节点。
	2.定位至左子树双链表最后一个节点。
	3.如果左子树链表不为空的话，将当前root追加到左子树链表。
	4.将右子树构造成双链表，并返回链表头节点。
	5.如果右子树链表不为空的话，将该链表追加到root节点之后。
	6.根据左子树链表是否为空确定返回的节点。

Solution：
/* function TreeNode(x) {
    this.val = x;
    this.left = null;
    this.right = null;
} */
function Convert(pRootOfTree)
{
    // write code here
    if(pRootOfTree == null){return null;}
    if(pRootOfTree.right == null && pRootOfTree.left == null) {
        return pRootOfTree;
    }
    var left = Convert(pRootOfTree.left);
    var p =left;
    while(p!=null&&p.right!=null){
        p = p.right;
    }
    if(left!=null){
        p.right = pRootOfTree;
        pRootOfTree.left = p;
    }
    var right = Convert(pRootOfTree.right);
    if(right){
        right.left = pRootOfTree;
        pRootOfTree.right = right;
    }
    return left!==null?left:pRootOfTree;
}
module.exports = {
    Convert : Convert
};