合并两个排序的链表：

输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。

分析：
	有两种做法，递归和非递归。

Solution1:
/*function ListNode(x){
    this.val = x;
    this.next = null;
}*/
function Merge(pHead1, pHead2)
{
    // write code here
    if(pHead1 === null){
        return pHead2;
    }else if(pHead2 === null){
        return pHead1;
    }
    if(pHead1.val>pHead2.val){
        pHead2.next = Merge(pHead1,pHead2.next);
        return pHead2;
    }else{
        pHead1.next = Merge(pHead1.next,pHead2);
        return pHead1;
    }
}
module.exports = {
    Merge : Merge
};


Solution2:
/*function ListNode(x){
    this.val = x;
    this.next = null;
}*/
function Merge(pHead1, pHead2)
{
    // write code here
    if(pHead1 === null){
        return pHead2;
    }else if(pHead2 === null){
        return pHead1;
    }
    var head = null;
    if(pHead1.val>pHead2.val){
        head = pHead2;
        pHead2 = pHead2.next;
    }else{
        head = pHead1;
        pHead1 = pHead1.next;
    }
    var head1 = head;
    while(pHead1 !==null || pHead2 !== null){
        if(pHead1 === null){
            head.next = pHead2;
            head = head.next;
            pHead2 = pHead2.next;
        }else if(pHead2 === null){
            head.next = pHead1;
            head = head.next;
            pHead1 = pHead1.next;
        }else{
            if(pHead1.val>pHead2.val){
                head.next = pHead2;
                head = head.next;
                pHead2 = pHead2.next;
            }else{
                head.next = pHead1;
                head = head.next;
                pHead1 = pHead1.next;
            }
        }
    }
    return head1;
}
module.exports = {
    Merge : Merge
};
