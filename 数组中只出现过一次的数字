数组中只出现过一次的数字：
一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。

分析：
	首先我们考虑这个问题的一个简单版本：一个数组里除了一个数字之外，其他的数字都出现了两次。请写程序找出这个只出现一次的数字。
 这个题目的突破口在哪里？题目为什么要强调有一个数字出现一次，其他的出现两次？我们想到了异或运算的性质：任何一个数字异或它自己都
 等于0 。也就是说，如果我们从头到尾依次异或数组中的每一个数字，那么最终的结果刚好是那个只出现一次的数字，因为那些出现两次的数字
 全部在异或中抵消掉了。
 	有了上面简单问题的解决方案之后，我们回到原始的问题。如果能够把原数组分为两个子数组。在每个子数组中，包含一个只出现一次的数字，
 而其它数字都出现两次。如果能够这样拆分原数组，按照前面的办法就是分别求出这两个只出现一次的数字了。
 	我们还是从头到尾依次异或数组中的每一个数字，那么最终得到的结果就是两个只出现一次的数字的异或结果。因为其它数字都出现了两次，
 在异或中全部抵消掉了。由于这两个数字肯定不一样，那么这个异或结果肯定不为0 ，也就是说在这个结果数字的二进制表示中至少就有一位为1 。我们在结果数字中找到第一个为1 的位的位置，记为第N 位。现在我们以第N 位是不是1 为标准把原数组中的数字分成两个子数组，第一个子
 数组中每个数字的第N 位都为1 ，而第二个子数组的每个数字的第N 位都为0 。
 	现在我们已经把原数组分成了两个子数组，每个子数组都包含一个只出现一次的数字，而其它数字都出现了两次。因此到此为止，所有的问题
 我们都已经解决。

 Solution1:(这个解法的时间复杂度(O(nlogn))较高，但是空间复杂度(O(1)))
 function FindNumsAppearOnce(array)
{
    if(!array||array.length<=1) return;
     
    var len = array.length,
        temp = 0;
     
    //将所有数字进行异或运算，得到的结果为两个只出现一次的数字的异或结果
    for(var i=0;i<len;++i){
        temp^=array[i];
    }
    if(temp==0) return;//说明不存在相同的数
     
    //找到第一个为1的位的位置,为1的位肯定是两个数不一样的位，以该位对数组进行分组
    var index=0;
    while((temp&1)==0){
        temp>>=1;
        ++index;
    }
   //将数组分为两个子数组
    var num1=0,
        num2=0;
    for(var i=0;i<len;i++){
        if(isBit(array[i],index)){
            num1^=array[i];//将第index位为1的数分为一组，所有数进行异或的结果为两个只出现一次的数字之一
        }
        else{
            num2^=array[i];//将第index位为0的数分为一组，所有数进行异或的结果为另一个只出现一次的数字
        }
    }
    return [num1,num2];
}
 
//判断数字的第index位是否为1
function isBit(num,index){
    num>>=index;
    return (num&1);
}
 
module.exports = {
    FindNumsAppearOnce : FindNumsAppearOnce
};

Solution2:(这个解法的时间复杂度(O(n))比较低，但是使用了空间复杂度(O(n)))
function FindNumsAppearOnce(array)
{
    // write code here
    // return list, 比如[a,b]，其中ab是出现一次的两个数字
    var flag = {};
    var rtn = [];
    var len = array.length;
    for(var i = 0;i<len;i++){
        if(flag[array[i]]){
            flag[array[i]] = 0;
        }else{
            flag[array[i]] = 1;
        }
    }
    for(var o in flag){
        if(flag[o] == 1){
            rtn.push(o);
        }
    }
    return rtn;
}
module.exports = {
    FindNumsAppearOnce : FindNumsAppearOnce
};
