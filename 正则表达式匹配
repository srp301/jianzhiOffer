正则表达式匹配：
请实现一个函数用来匹配包括'.'和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次
（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串"aaa"与模式"a.a"和"ab*ac*a"匹配，但是与
"aa.a"和"ab*a"均不匹配。

分析:
当模式中的第二个字符不是“*”时：
1、如果字符串第一个字符和模式中的第一个字符相匹配，那么字符串和模式都后移一个字符，然后匹配剩余的。
2、如果 字符串第一个字符和模式中的第一个字符相不匹配，直接返回false。

而当模式中的第二个字符是“*”时：
如果字符串第一个字符跟模式第一个字符不匹配，则模式后移2个字符，继续匹配。如果字符串第一个字符跟模式第一个字符匹配，可以有3种匹配方式：
1、模式后移2字符，相当于x*被忽略；
2、字符串后移1字符，模式后移2字符；
3、字符串后移1字符，模式不变，即继续匹配字符下一位，因为*可以匹配多位；

Solution1:
//s, pattern都是字符串
function match(s, pattern)
{
    // write code here
    if(!s && !pattern){
        return true;
    }
    return mymatch(s,0,pattern,0);
    function mymatch(s,sindex,pattern,pindex){
        if(sindex == s.length && pindex == pattern.length){
            return true;
        }
        if(sindex != s.length && pindex == pattern.length){
            return false;
        }
        if (pindex + 1 < pattern.length && pattern[pindex + 1] == '*') {
            if ((sindex != s.length && pattern[pindex] == s[sindex]) || (pattern[pindex] == '.' && sindex != s.length)) {
                return mymatch(s, sindex, pattern, pindex + 2)
                        || mymatch(s, sindex + 1, pattern, pindex + 2)
                        || mymatch(s, sindex + 1, pattern, pindex);
            } else {
                return mymatch(s, sindex, pattern, pindex + 2);
            }
        }
        //模式第2个不是*，且字符串第1个跟模式第1个匹配，则都后移1位，否则直接返回false
        if ((sindex != s.length && pattern[pindex] == s[sindex]) || (pattern[pindex] == '.' && sindex != s.length)) {
            return mymatch(s, sindex + 1, pattern, pindex + 1);
        }
        return false;
    }
}
module.exports = {
    match : match
};

Solution2:
//s, pattern都是字符串
function match(s, pattern)
{
    // write code here
    var reg = new RegExp('^'+pattern+'$');
    return reg.test(s);
}
module.exports = {
    match : match
};