调整数组顺序使奇数位于偶数前面：
    输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，
并保证奇数和奇数，偶数和偶数之间的相对位置不变。
分析：
	1.要想保证原有次序，则只能顺次移动或相邻交换。
 	2.i从左向右遍历，找到第一个偶数。
 	3.j从i+1开始向后找，直到找到第一个奇数。
 	4.将[i,...,j-1]的元素整体后移一位，最后将找到的奇数放入i位置，然后i++。
 	5.終止條件：j向後遍歷查找失敗。

	JavaScript splice() 方法：
	语法：
	array.splice(index,howmany,item1,.....,itemX)
	参数 Values
	参数			描述
	index	必需。规定从何处添加/删除元素。该参数是开始插入和（或）删除的数组元素的下标，必须是数字。
	howmany	必需。规定应该删除多少元素。必须是数字，但可以是 "0"。如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。
	item1, ..., itemX	可选。要添加到数组的新元素

Solution:

function reOrderArray(array)
{
    // write code here
    var len = array.length
    for(var i = 0;i<len ;i++){
        if(array[i]%2===0){
            for(var j = i+1;j<len;j++){
            	if(array[j]%2===1){
                    var a = array.splice(j,1);
                    array.splice(i,0,a);
                    break;
                }
        	}
        }
    }
    return array;
}