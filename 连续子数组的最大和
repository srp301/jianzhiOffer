连续子数组的最大和：

HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续
子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它
呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。
你会不会被他忽悠住？(子向量的长度至少是1)

分析：
	首先，题意是指任何子数组，不一定是要从头开始的。用的是动态规划，当一段数组之和小于0的时候，就把这段数组舍弃，因为这段
	数组之和对于后面的数组没有任何帮助。

Solution:
function FindGreatestSumOfSubArray(array)
{
    // write code here
    var max = array[0],
        temp = array[0],
    	len = array.length;
    for(var i = 1;i<len;i++){
        temp = temp > 0 ? temp+array[i] : array[i];
        max = max > temp ? max : temp;
    }
    return max;
}
module.exports = {
    FindGreatestSumOfSubArray : FindGreatestSumOfSubArray
};