链表中环的入口结点：
一个链表中包含环，请找出该链表的环的入口结点。

分析：
	Solution2:
	第一步，找环中相汇点。分别用p1，p2指向链表头部，p1每次走一步，p2每次走二步，直到p1==p2找到在环中的相汇点。
	第二步，找环的入口。接上步，当p1==p2时，p2所经过节点数为2x,p1所经过节点数为x,设环中有n个节点,p2比p1多走一圈有
	2x=n+x; n=x;可以看出p1实际走了一个环的步数，再让p2指向链表头部，p1位置不变，p1,p2每次走一步直到p1==p2; 
	此时p1指向环的入口。（如果不懂请画图设未知数列方程分析）

Solution1:(时间复杂度O(n)，空间复杂度O(n))
/*function ListNode(x){
    this.val = x;
    this.next = null;
}*/
function EntryNodeOfLoop(pHead)
{
    // write code here
    var flag = {};
    while(pHead != null){
        if(!flag[pHead.val]){
            flag[pHead.val] = 1;
        }else{
            return pHead;
        }
        pHead = pHead.next;
    }
}
module.exports = {
    EntryNodeOfLoop : EntryNodeOfLoop
};

Solution2:(时间复杂度O(n)，空间复杂度O(1))
/*function ListNode(x){
    this.val = x;
    this.next = null;
}*/
function EntryNodeOfLoop(pHead)
{
    // write code here
    if(pHead ==null || pHead.next ==null){
        return null;
    }
    var fast = pHead;
    var slow = pHead;
    while(fast != null && slow != null){
        fast = fast.next.next;
        slow = slow.next;
        if(fast == slow){
            fast = pHead;
            while(fast != slow){
                fast = fast.next;
                slow = slow.next;
            }
            return fast;
        }
    }
    return null;
}
module.exports = {
    EntryNodeOfLoop : EntryNodeOfLoop
};
